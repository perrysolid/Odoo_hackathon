<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ReWear Admin Panel</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        /* Define consistent colors for easy modification */
        :root {
            --dark-bg: #121212; /* Deeper dark background from your landing page */
            --panel-bg: #1e1e1e; /* Slightly lighter than main background for contrast */
            --accent-green: #00C853; /* The signature ReWear green */
            --light-text: #ffffff;
            --secondary-text: #cccccc;
            --border-color: #333333; /* Subtle border color */
            --button-dark-bg: #2a2a2a; /* Darker button background */
            --button-hover-bg: #3a3a3a; /* Button hover background */
            --action-delete: #dc3545; /* Red for delete */
            --action-update: #ffc107; /* Yellow for update */
            --action-approve: #28a745; /* Green for approve (different from accent) */
        }

        /* Basic Reset & Body Styles */
        body {
            margin: 0;
            /* Font change: Using Poppins or a similar sans-serif font */
            font-family: 'Poppins', Arial, sans-serif;
            background-color: var(--dark-bg);
            color: var(--light-text);
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            padding: 20px;
            box-sizing: border-box;
        }

        /* Admin Panel Container */
        .admin-panel-container {
            background-color: var(--panel-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 20px;
            width: 100%;
            max-width: 900px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.5); /* Stronger shadow for depth */
            box-sizing: border-box;
        }

        /* Header */
        .admin-panel-header {
            text-align: center;
            margin-bottom: 20px;
            font-size: 1.8em;
            font-weight: 600; /* Adjusted for Poppins (semi-bold) */
            color: var(--light-text);
        }

        /* Top Bar */
        .top-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 10px;
            background-color: var(--dark-bg); /* Darker background for top bar */
            border-radius: 8px; /* Slightly rounded for consistency */
            gap: 15px;
            flex-wrap: wrap;
        }

        .logo {
            height: 35px; /* Adjusted size to fit the top bar better */
            width: auto;
            margin-right: auto;
            vertical-align: middle;
            filter: brightness(1.2); /* Slightly brighten the logo to stand out */
        }

        .search-container {
            position: relative;
            flex-grow: 1;
            max-width: 400px;
        }

        .search-input {
            width: 100%;
            padding: 10px 15px 10px 40px;
            border: 1px solid var(--border-color);
            border-radius: 25px; /* Rounded */
            background-color: var(--button-dark-bg); /* Matches button background */
            color: var(--light-text);
            font-size: 1em;
            box-sizing: border-box;
            transition: border-color 0.3s, box-shadow 0.3s;
        }
        .search-input:focus {
            outline: none;
            border-color: var(--accent-green);
            box-shadow: 0 0 0 2px rgba(0, 200, 83, 0.3); /* Green glow on focus */
        }

        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--secondary-text);
            font-size: 1.1em;
        }

        .profile-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .profile-circle {
            width: 40px;
            height: 40px;
            border: 2px solid var(--accent-green); /* Green border for profile */
            border-radius: 50%;
            background-color: var(--button-dark-bg);
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.2em;
            color: var(--light-text);
            transition: background-color 0.3s, border-color 0.3s;
        }
        .profile-circle:hover {
            background-color: var(--button-hover-bg);
            border-color: var(--light-text);
        }
        .profile-circle::before {
            content: '👤'; /* Unicode character for user icon */
        }


        /* Navigation Buttons */
        .nav-buttons {
            display: flex;
            justify-content: space-around;
            gap: 10px;
            margin-bottom: 20px;
        }

        .nav-button {
            flex: 1;
            padding: 10px 15px;
            background-color: var(--button-dark-bg);
            border: 1px solid var(--border-color);
            border-radius: 25px; /* Rounded edges */
            color: var(--light-text);
            font-size: 1em;
            cursor: pointer;
            transition: background-color 0.3s, border-color 0.3s, color 0.3s;
            text-align: center;
            white-space: nowrap;
        }

        .nav-button:hover {
            background-color: var(--button-hover-bg);
            border-color: var(--accent-green);
            color: var(--accent-green);
        }

        .nav-button.active {
            background-color: var(--accent-green);
            border-color: var(--accent-green);
            color: var(--dark-bg); /* Dark text on green background for active state */
            font-weight: 600; /* Consistent with header */
        }

        /* Content Sections */
        .content-section {
            display: none;
        }

        .content-section.active {
            display: block;
        }

        .section-title {
            font-size: 1.5em;
            margin-bottom: 15px;
            text-align: center;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: var(--dark-bg); /* Darker background for section titles */
            color: var(--accent-green); /* Green title */
            font-weight: 600; /* Consistent with header */
        }

        /* User List / Item Cards */
        .user-card {
            display: flex;
            align-items: center;
            background-color: var(--button-dark-bg); /* Darker background for cards */
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            flex-wrap: wrap;
            gap: 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3); /* Subtle shadow for cards */
        }

        .user-avatar {
            width: 60px;
            height: 60px;
            border: 2px solid var(--accent-green); /* Green border for avatars */
            border-radius: 50%;
            background-color: #555; /* Placeholder for user avatar */
            flex-shrink: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.8em;
            color: var(--light-text);
            overflow: hidden; /* Ensure avatar image is contained */
        }
        .user-avatar img { /* Style for actual image within avatar */
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .user-avatar::before {
             content: '👤'; /* Placeholder for avatar if no image */
        }


        .user-details {
            flex-grow: 1;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            padding: 10px;
            background-color: var(--panel-bg); /* Matches panel background */
            min-width: 150px;
        }

        .user-details p {
            margin: 0;
            padding: 0;
            color: var(--secondary-text);
            line-height: 1.5;
            font-size: 0.95em; /* Slightly smaller for details */
        }
        .user-details strong {
            color: var(--light-text);
            font-weight: 600; /* Consistent */
        }

        .user-actions {
            display: flex;
            flex-direction: column;
            gap: 8px;
            min-width: 120px;
        }

        .action-button {
            padding: 8px 12px;
            background-color: var(--accent-green); /* Default action button is green */
            color: var(--dark-bg); /* Dark text on green button */
            border: none;
            border-radius: 25px; /* Rounded edges */
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
            font-weight: 600; /* Bold for action buttons */
            text-transform: uppercase; /* Match landing page button style */
            letter-spacing: 0.5px;
            font-family: 'Poppins', Arial, sans-serif; /* Ensure button text also uses Poppins */
        }

        .action-button:hover {
            background-color: var(--light-text); /* White on hover */
            color: var(--accent-green); /* Green text on white hover */
        }

        /* Specific action button colors */
        .action-button.delete {
            background-color: var(--action-delete);
            color: var(--light-text);
        }
        .action-button.delete:hover {
            background-color: #c82333;
            color: var(--light-text);
        }
        .action-button.update {
            background-color: var(--action-update);
            color: var(--dark-bg);
        }
        .action-button.update:hover {
            background-color: #e0a800;
            color: var(--dark-bg);
        }
        .action-button.approve {
            background-color: var(--action-approve);
            color: var(--light-text);
        }
        .action-button.approve:hover {
            background-color: #218838;
            color: var(--light-text);
        }


        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .top-bar {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            .logo {
                margin-right: 0;
                margin-bottom: 10px;
            }

            .search-container {
                width: 100%;
                max-width: none;
            }

            .profile-container {
                width: 100%;
                justify-content: flex-end; /* Push profile to the right on small screens */
            }

            .nav-buttons {
                flex-direction: column;
            }

            .user-card {
                flex-direction: column;
                text-align: center;
                align-items: center;
            }

            .user-details,
            .user-actions {
                width: 100%;
                box-sizing: border-box;
            }
        }
    </style>
</head>
<body>
    <div class="admin-panel-container">
        <div class="admin-panel-header">
            Admin Panel
        </div>

        <div class="top-bar">
            <img src="logo.png" alt="ReWear Logo" class="logo">
            <div class="search-container">
                <span class="search-icon">🔍</span>
                <input type="text" class="search-input" placeholder="Search users, orders, listings...">
            </div>
            <div class="profile-container">
                <div class="profile-circle"></div>
            </div>
        </div>

        <div class="nav-buttons">
            <button class="nav-button active" data-target="manage-users">Manage Users</button>
            <button class="nav-button" data-target="manage-orders">Manage Orders</button>
            <button class="nav-button" data-target="manage-listings">Manage Listings</button>
        </div>

        <div id="manage-users" class="content-section active">
            <div class="section-title">Manage Users</div>
            </div>

        <div id="manage-orders" class="content-section">
            <div class="section-title">Manage Orders</div>
            </div>

        <div id="manage-listings" class="content-section">
            <div class="section-title">Manage Listings</div>
            </div>
    </div>

    <script>
        // Define your backend API base URL
        // In development, this might be 'http://localhost:3000' or similar
        // In production, this would be your deployed backend URL
        const API_BASE_URL = 'http://localhost:3000/api'; // Example backend URL

        document.addEventListener('DOMContentLoaded', () => {
            const navButtons = document.querySelectorAll('.nav-button');
            const contentSections = document.querySelectorAll('.content-section');
            const manageUsersSection = document.getElementById('manage-users');
            const manageOrdersSection = document.getElementById('manage-orders');
            const manageListingsSection = document.getElementById('manage-listings');

            // Function to create a user card HTML element
            function createUserCard(user) {
                const userCard = document.createElement('div');
                userCard.classList.add('user-card');

                // User Avatar (optional: display image if available, else placeholder)
                const userAvatar = document.createElement('div');
                userAvatar.classList.add('user-avatar');
                if (user.avatarUrl) {
                    const img = document.createElement('img');
                    img.src = user.avatarUrl;
                    img.alt = user.name + ' Avatar';
                    userAvatar.appendChild(img);
                    userAvatar.style.setProperty('--content-before', 'none'); // Hide unicode if image is present
                } else {
                     userAvatar.style.setProperty('--content-before', '""'); // Ensure placeholder is shown if no image
                }
                userCard.appendChild(userAvatar);


                const userDetails = document.createElement('div');
                userDetails.classList.add('user-details');
                userDetails.innerHTML = `
                    <p><strong>User ID:</strong> ${user.id}</p>
                    <p><strong>Name:</strong> ${user.name}</p>
                    <p><strong>Email:</strong> ${user.email}</p>
                    <p><strong>Points:</strong> ${user.points}</p>
                `;
                userCard.appendChild(userDetails);

                const userActions = document.createElement('div');
                userActions.classList.add('user-actions');
                userActions.innerHTML = `
                    <button class="action-button">Edit User</button>
                    <button class="action-button delete">Delete User</button>
                `;
                userCard.appendChild(userActions);

                return userCard;
            }

            // Function to fetch and render users
            async function fetchAndRenderUsers() {
                // Clear existing content
                manageUsersSection.innerHTML = '<div class="section-title">Manage Users</div>';

                try {
                    // This URL should match your backend's user endpoint
                    const response = await fetch(`${API_BASE_URL}/users`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const users = await response.json(); // Assuming backend returns JSON array of users

                    if (users.length === 0) {
                        const noUsersMessage = document.createElement('p');
                        noUsersMessage.style.textAlign = 'center';
                        noUsersMessage.style.color = 'var(--secondary-text)';
                        noUsersMessage.textContent = 'No users found in the database.';
                        manageUsersSection.appendChild(noUsersMessage);
                        return;
                    }

                    users.forEach(user => {
                        const userCard = createUserCard(user);
                        manageUsersSection.appendChild(userCard);
                    });
                } catch (error) {
                    console.error('Error fetching users:', error);
                    const errorMessage = document.createElement('p');
                    errorMessage.style.textAlign = 'center';
                    errorMessage.style.color = 'var(--action-delete)';
                    errorMessage.textContent = 'Failed to load users. Please check the backend server.';
                    manageUsersSection.appendChild(errorMessage);
                }
            }

            // Function to create an order card HTML element (example, similar structure to user card)
            function createOrderCard(order) {
                const orderCard = document.createElement('div');
                orderCard.classList.add('user-card'); // Re-using user-card styling

                const orderAvatar = document.createElement('div');
                orderAvatar.classList.add('user-avatar');
                orderAvatar.style.backgroundColor = '#8860B3'; // Example color for orders
                orderAvatar.innerHTML = '🛒'; // Example icon for orders
                orderCard.appendChild(orderAvatar);

                const orderDetails = document.createElement('div');
                orderDetails.classList.add('user-details');
                orderDetails.innerHTML = `
                    <p><strong>Order ID:</strong> ${order.id}</p>
                    <p><strong>Type:</strong> ${order.type}</p>
                    <p><strong>Status:</strong> ${order.status}</p>
                    <p><strong>Users:</strong> ${order.users}</p>
                `;
                orderCard.appendChild(orderDetails);

                const orderActions = document.createElement('div');
                orderActions.classList.add('user-actions');
                orderActions.innerHTML = `
                    <button class="action-button">View Order</button>
                    <button class="action-button update">Update Status</button>
                `;
                orderCard.appendChild(orderActions);

                return orderCard;
            }

            // Function to fetch and render orders
            async function fetchAndRenderOrders() {
                // Clear existing content
                manageOrdersSection.innerHTML = '<div class="section-title">Manage Orders</div>';

                try {
                    const response = await fetch(`${API_BASE_URL}/orders`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const orders = await response.json();

                    if (orders.length === 0) {
                        const noOrdersMessage = document.createElement('p');
                        noOrdersMessage.style.textAlign = 'center';
                        noOrdersMessage.style.color = 'var(--secondary-text)';
                        noOrdersMessage.textContent = 'No orders found in the database.';
                        manageOrdersSection.appendChild(noOrdersMessage);
                        return;
                    }

                    orders.forEach(order => {
                        const orderCard = createOrderCard(order);
                        manageOrdersSection.appendChild(orderCard);
                    });
                } catch (error) {
                    console.error('Error fetching orders:', error);
                    const errorMessage = document.createElement('p');
                    errorMessage.style.textAlign = 'center';
                    errorMessage.style.color = 'var(--action-delete)';
                    errorMessage.textContent = 'Failed to load orders. Please check the backend server.';
                    manageOrdersSection.appendChild(errorMessage);
                }
            }

            // Function to create a listing card HTML element
            function createListingCard(listing) {
                const listingCard = document.createElement('div');
                listingCard.classList.add('user-card'); // Re-using user-card styling

                const listingAvatar = document.createElement('div');
                listingAvatar.classList.add('user-avatar');
                listingAvatar.style.backgroundColor = '#60B370'; // Example color for listings
                listingAvatar.innerHTML = '👕'; // Example icon for listings
                listingCard.appendChild(listingAvatar);

                const listingDetails = document.createElement('div');
                listingDetails.classList.add('user-details');
                listingDetails.innerHTML = `
                    <p><strong>Listing ID:</strong> ${listing.id}</p>
                    <p><strong>Item:</strong> ${listing.item}</p>
                    <p><strong>Type:</strong> ${listing.type}</p>
                    <p><strong>Seller:</strong> ${listing.seller}</p>
                `;
                listingCard.appendChild(listingDetails);

                const listingActions = document.createElement('div');
                listingActions.classList.add('user-actions');
                listingActions.innerHTML = `
                    <button class="action-button">View Listing</button>
                    <button class="action-button approve">Approve Listing</button>
                `;
                listingCard.appendChild(listingActions);

                return listingCard;
            }

            // Function to fetch and render listings
            async function fetchAndRenderListings() {
                // Clear existing content
                manageListingsSection.innerHTML = '<div class="section-title">Manage Listings</div>';

                try {
                    const response = await fetch(`${API_BASE_URL}/listings`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const listings = await response.json();

                    if (listings.length === 0) {
                        const noListingsMessage = document.createElement('p');
                        noListingsMessage.style.textAlign = 'center';
                        noListingsMessage.style.color = 'var(--secondary-text)';
                        noListingsMessage.textContent = 'No listings found in the database.';
                        manageListingsSection.appendChild(noListingsMessage);
                        return;
                    }

                    listings.forEach(listing => {
                        const listingCard = createListingCard(listing);
                        manageListingsSection.appendChild(listingCard);
                    });
                } catch (error) {
                    console.error('Error fetching listings:', error);
                    const errorMessage = document.createElement('p');
                    errorMessage.style.textAlign = 'center';
                    errorMessage.style.color = 'var(--action-delete)';
                    errorMessage.textContent = 'Failed to load listings. Please check the backend server.';
                    manageListingsSection.appendChild(errorMessage);
                }
            }

            // Initial load based on the active button
            // This will call fetchAndRenderUsers() when the page loads
            function loadActiveContent() {
                const activeTab = document.querySelector('.nav-button.active');
                if (activeTab) {
                    const target = activeTab.dataset.target;
                    if (target === 'manage-users') {
                        fetchAndRenderUsers();
                    } else if (target === 'manage-orders') {
                        fetchAndRenderOrders();
                    } else if (target === 'manage-listings') {
                        fetchAndRenderListings();
                    }
                }
            }

            navButtons.forEach(button => {
                button.addEventListener('click', () => {
                    navButtons.forEach(btn => btn.classList.remove('active'));
                    contentSections.forEach(section => section.classList.remove('active'));

                    button.classList.add('active');

                    const targetId = button.dataset.target;
                    document.getElementById(targetId).classList.add('active');

                    // Call the appropriate fetch function based on the clicked tab
                    if (targetId === 'manage-users') {
                        fetchAndRenderUsers();
                    } else if (targetId === 'manage-orders') {
                        fetchAndRenderOrders();
                    } else if (targetId === 'manage-listings') {
                        fetchAndRenderListings();
                    }
                });
            });

            // Load initial content when the page loads
            loadActiveContent();
        });
    </script>
</body>
</html>
