<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ReWear User Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        /* Define consistent colors for easy modification */
        :root {
            --dark-bg: #121212; /* Deeper dark background from your landing page */
            --panel-bg: #1e1e1e; /* Slightly lighter than main background for contrast */
            --accent-green: #00C853; /* The signature ReWear green */
            --light-text: #ffffff;
            --secondary-text: #cccccc;
            --border-color: #333333; /* Subtle border color */
            --button-dark-bg: #2a2a2a; /* Darker button background */
            --button-hover-bg: #3a3a3a; /* Button hover background */
            --action-delete: #dc3545; /* Red for delete */
            --action-update: #ffc107; /* Yellow for update */
            --action-approve: #28a745; /* Green for approve (different from accent) */
        }

        /* Basic Reset & Body Styles */
        body {
            margin: 0;
            font-family: 'Poppins', Arial, sans-serif;
            background-color: var(--dark-bg);
            color: var(--light-text);
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            padding: 20px;
            box-sizing: border-box;
        }

        /* User Dashboard Container */
        .user-dashboard-container {
            background-color: var(--panel-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 20px;
            width: 100%;
            max-width: 900px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.5);
            box-sizing: border-box;
        }

        /* Header */
        .user-dashboard-header {
            text-align: center;
            margin-bottom: 20px;
            font-size: 1.8em;
            font-weight: 600;
            color: var(--light-text);
        }

        /* Top Bar - Reusing Admin Panel Styles */
        .top-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 10px;
            background-color: var(--dark-bg);
            border-radius: 8px;
            gap: 15px;
            flex-wrap: wrap;
        }

        .logo {
            height: 35px;
            width: auto;
            margin-right: auto;
            vertical-align: middle;
            filter: brightness(1.2);
        }

        .search-container {
            position: relative;
            flex-grow: 1;
            max-width: 400px;
        }

        .search-input {
            width: 100%;
            padding: 10px 15px 10px 40px;
            border: 1px solid var(--border-color);
            border-radius: 25px;
            background-color: var(--button-dark-bg);
            color: var(--light-text);
            font-size: 1em;
            box-sizing: border-box;
            transition: border-color 0.3s, box-shadow 0.3s;
        }
        .search-input:focus {
            outline: none;
            border-color: var(--accent-green);
            box-shadow: 0 0 0 2px rgba(0, 200, 83, 0.3);
        }

        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--secondary-text);
            font-size: 1.1em;
        }

        .profile-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .profile-circle {
            width: 40px;
            height: 40px;
            border: 2px solid var(--accent-green);
            border-radius: 50%;
            background-color: var(--button-dark-bg);
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.2em;
            color: var(--light-text);
            transition: background-color 0.3s, border-color 0.3s;
        }
        .profile-circle:hover {
            background-color: var(--button-hover-bg);
            border-color: var(--light-text);
        }
        .profile-circle::before {
            content: '👤';
        }

        /* Main Content Area */
        .main-content {
            padding-top: 10px;
        }

        /* User Profile Section */
        .user-profile-section {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 30px;
            background-color: var(--button-dark-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 20px;
            align-items: flex-start;
        }

        .user-avatar-large {
            width: 120px;
            height: 120px;
            border: 3px solid var(--accent-green);
            border-radius: 50%;
            background-color: #555;
            flex-shrink: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 4em;
            color: var(--light-text);
            overflow: hidden;
        }
        .user-avatar-large img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        /* Only show unicode if no image is present */
        .user-avatar-large:empty::before {
            content: '👤';
        }


        .user-details-grid {
            flex-grow: 1;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 10px;
            padding: 10px;
            background-color: var(--panel-bg);
            border: 1px solid var(--border-color);
            border-radius: 5px;
        }

        .user-details-grid p {
            margin: 0;
            color: var(--secondary-text);
            font-size: 0.9em;
        }
        .user-details-grid strong {
            color: var(--light-text);
            font-weight: 600;
        }

        .user-bio-area {
            width: 100%;
            min-height: 100px; /* Use min-height for bio */
            border: 1px solid var(--border-color);
            border-radius: 5px;
            padding: 10px;
            background-color: var(--panel-bg);
            color: var(--secondary-text);
            font-size: 0.95em;
            line-height: 1.4;
            overflow-y: auto;
        }
        .user-bio-area p {
             margin: 0; /* Remove default paragraph margins */
        }
        .user-bio-area strong {
            color: var(--light-text);
            font-weight: 600;
        }

        /* Section Titles - Reusing Admin Panel Style */
        .section-title {
            font-size: 1.5em;
            margin-bottom: 15px;
            text-align: center;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: var(--dark-bg);
            color: var(--accent-green);
            font-weight: 600;
        }

        /* Item Cards (for My Listings/Purchases) - Adapted from user-card */
        .item-card-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .item-card {
            background-color: var(--button-dark-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
            text-align: center;
            transition: transform 0.2s ease-in-out;
        }
        .item-card:hover {
            transform: translateY(-5px);
        }

        .item-image-placeholder {
            width: 100%;
            height: 120px;
            background-color: #555;
            border-radius: 5px;
            margin-bottom: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 3em;
            color: var(--light-text);
            overflow: hidden;
        }
        .item-image-placeholder img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        /* Only show unicode if no image is present */
        .item-image-placeholder:empty::before {
            content: '👕';
        }


        .item-card h4 {
            margin: 0 0 5px 0;
            color: var(--light-text);
            font-weight: 600;
            font-size: 1.1em;
        }

        .item-card p {
            margin: 0 0 5px 0;
            color: var(--secondary-text);
            font-size: 0.85em;
        }

        .item-card .action-button {
            width: 100%;
            margin-top: 10px;
            padding: 8px;
            font-size: 0.9em;
            font-family: 'Poppins', Arial, sans-serif;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        /* Action Button styles from admin panel (copying for item cards too) */
        .action-button {
            background-color: var(--accent-green);
            color: var(--dark-bg);
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
        }

        .action-button:hover {
            background-color: var(--light-text);
            color: var(--accent-green);
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .top-bar {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            .logo {
                margin-right: 0;
                margin-bottom: 10px;
            }
            .search-container {
                width: 100%;
                max-width: none;
            }
            .profile-container {
                width: 100%;
                justify-content: flex-end;
            }
            .user-profile-section {
                flex-direction: column;
                align-items: center;
                text-align: center;
            }
            .user-details-grid {
                grid-template-columns: 1fr;
            }
            .user-bio-area {
                min-height: 80px;
            }
            .item-card-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }
        }
    </style>
</head>
<body>
    <div class="user-dashboard-container">
        <div class="user-dashboard-header">
            User Dashboard
        </div>

        <div class="top-bar">
            <img src="logo.png" alt="ReWear Logo" class="logo">
            <div class="search-container">
                <span class="search-icon">🔍</span>
                <input type="text" class="search-input" placeholder="Search your items...">
            </div>
            <div class="profile-container">
                <div class="profile-circle"></div>
            </div>
        </div>

        <div class="main-content">
            <div class="user-profile-section">
                <div class="user-avatar-large" id="user-avatar-large">
                    </div>
                <div class="user-details-grid" id="user-details-grid">
                    <p><strong>Name:</strong> Loading...</p>
                    <p><strong>Email:</strong> Loading...</p>
                    <p><strong>User ID:</strong> Loading...</p>
                    <p><strong>Points:</strong> Loading...</p>
                    <p><strong>Member Since:</strong> Loading...</p>
                    <p><strong>Location:</strong> Loading...</p>
                </div>
                <div class="user-bio-area" id="user-bio-area">
                    <p><strong>Bio:</strong> Loading bio...</p>
                </div>
            </div>

            <div class="section-title">My Listings</div>
            <div id="my-listings-grid" class="item-card-grid">
                <p style="text-align: center; color: var(--secondary-text); width: 100%;">Loading listings...</p>
            </div>

            <div class="section-title">My Purchases</div>
            <div id="my-purchases-grid" class="item-card-grid">
                <p style="text-align: center; color: var(--secondary-text); width: 100%;">Loading purchases...</p>
            </div>
        </div>
    </div>

    <script>
        // Define your backend API base URL
        const API_BASE_URL = 'http://localhost:3000/api'; // ***IMPORTANT: Adjust this to your backend URL***

        document.addEventListener('DOMContentLoaded', () => {
            const userAvatarLarge = document.getElementById('user-avatar-large');
            const userDetailsGrid = document.getElementById('user-details-grid');
            const userBioArea = document.getElementById('user-bio-area');
            const myListingsGrid = document.getElementById('my-listings-grid');
            const myPurchasesGrid = document.getElementById('my-purchases-grid');

            // --- Function to fetch and render User Profile ---
            async function fetchAndRenderUserProfile() {
                // Clear existing placeholders
                userDetailsGrid.innerHTML = '';
                userBioArea.innerHTML = '';

                // You'll need to get the actual userId from your authentication system
                // For demonstration, let's use a placeholder ID or assume a fixed user for now.
                const userId = 'RWU12345'; // Replace with dynamic user ID

                try {
                    // This URL should match your backend's user profile endpoint
                    const response = await fetch(`${API_BASE_URL}/users/${userId}`); // Example: /api/users/RWU12345
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const user = await response.json(); // Assuming backend returns a single user object

                    // Populate Avatar
                    userAvatarLarge.innerHTML = ''; // Clear avatar content
                    if (user.avatarUrl) {
                        const img = document.createElement('img');
                        img.src = user.avatarUrl;
                        img.alt = user.name + ' Profile Picture';
                        userAvatarLarge.appendChild(img);
                    } else {
                        // Fallback to unicode if no image URL
                        userAvatarLarge.textContent = '👤';
                    }

                    // Populate Details Grid
                    userDetailsGrid.innerHTML = `
                        <p><strong>Name:</strong> ${user.name || 'N/A'}</p>
                        <p><strong>Email:</strong> ${user.email || 'N/A'}</p>
                        <p><strong>User ID:</strong> ${user.id || 'N/A'}</p>
                        <p><strong>Points:</strong> ${user.points !== undefined ? user.points : 'N/A'}</p>
                        <p><strong>Member Since:</strong> ${user.memberSince || 'N/A'}</p>
                        <p><strong>Location:</strong> ${user.location || 'N/A'}</p>
                    `;

                    // Populate Bio Area
                    userBioArea.innerHTML = `<p><strong>Bio:</strong> ${user.bio || 'No bio provided.'}</p>`;

                } catch (error) {
                    console.error('Error fetching user profile:', error);
                    userDetailsGrid.innerHTML = '<p style="color: var(--action-delete);">Failed to load profile.</p>';
                    userBioArea.innerHTML = '<p style="color: var(--action-delete);">Failed to load bio.</p>';
                    userAvatarLarge.textContent = '❌'; // Indicate error
                }
            }


            // Function to create an item card HTML element (for listings and purchases)
            function createItemCard(item, type) {
                const itemCard = document.createElement('div');
                itemCard.classList.add('item-card');

                const itemImagePlaceholder = document.createElement('div');
                itemImagePlaceholder.classList.add('item-image-placeholder');
                if (item.imageUrl) {
                    const img = document.createElement('img');
                    img.src = item.imageUrl;
                    img.alt = item.name;
                    itemImagePlaceholder.appendChild(img);
                }
                itemCard.appendChild(itemImagePlaceholder);

                const title = document.createElement('h4');
                title.textContent = item.name;
                itemCard.appendChild(title);

                const typeOrFrom = document.createElement('p');
                if (type === 'listing') {
                    typeOrFrom.textContent = `Type: ${item.type}`;
                } else if (type === 'purchase') {
                    typeOrFrom.textContent = `From: ${item.seller}`;
                }
                itemCard.appendChild(typeOrFrom);

                const statusOrPoints = document.createElement('p');
                if (type === 'listing') {
                    statusOrPoints.textContent = `Status: ${item.status}`;
                } else if (type === 'purchase') {
                    statusOrPoints.textContent = `Points: ${item.points}`;
                }
                itemCard.appendChild(statusOrPoints);

                const viewButton = document.createElement('button');
                viewButton.classList.add('action-button');
                viewButton.textContent = 'View Details';
                itemCard.appendChild(viewButton);

                return itemCard;
            }

            // Function to fetch and render My Listings
            async function fetchAndRenderMyListings() {
                myListingsGrid.innerHTML = '<p style="text-align: center; color: var(--secondary-text); width: 100%;">Loading listings...</p>'; // Show loading

                const userId = 'RWU12345'; // Replace with actual user ID

                try {
                    const response = await fetch(`${API_BASE_URL}/users/${userId}/listings`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const listings = await response.json();

                    myListingsGrid.innerHTML = ''; // Clear loading message

                    if (listings.length === 0) {
                        const noListingsMessage = document.createElement('p');
                        noListingsMessage.style.textAlign = 'center';
                        noListingsMessage.style.color = 'var(--secondary-text)';
                        noListingsMessage.style.width = '100%';
                        noListingsMessage.textContent = 'You have no active listings.';
                        myListingsGrid.appendChild(noListingsMessage);
                        return;
                    }

                    listings.forEach(listing => {
                        const card = createItemCard(listing, 'listing');
                        myListingsGrid.appendChild(card);
                    });
                } catch (error) {
                    console.error('Error fetching listings:', error);
                    myListingsGrid.innerHTML = '<p style="text-align: center; color: var(--action-delete); width: 100%;">Failed to load your listings. Please try again later.</p>';
                }
            }

            // Function to fetch and render My Purchases
            async function fetchAndRenderMyPurchases() {
                myPurchasesGrid.innerHTML = '<p style="text-align: center; color: var(--secondary-text); width: 100%;">Loading purchases...</p>'; // Show loading

                const userId = 'RWU12345'; // Replace with actual user ID

                try {
                    const response = await fetch(`${API_BASE_URL}/users/${userId}/purchases`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const purchases = await response.json();

                    myPurchasesGrid.innerHTML = ''; // Clear loading message

                    if (purchases.length === 0) {
                        const noPurchasesMessage = document.createElement('p');
                        noPurchasesMessage.style.textAlign = 'center';
                        noPurchasesMessage.style.color = 'var(--secondary-text)';
                        noPurchasesMessage.style.width = '100%';
                        noPurchasesMessage.textContent = 'You have not made any purchases yet.';
                        myPurchasesGrid.appendChild(noPurchasesMessage);
                        return;
                    }

                    purchases.forEach(purchase => {
                        const card = createItemCard(purchase, 'purchase');
                        myPurchasesGrid.appendChild(card);
                    });
                } catch (error) {
                    console.error('Error fetching purchases:', error);
                    myPurchasesGrid.innerHTML = '<p style="text-align: center; color: var(--action-delete); width: 100%;">Failed to load your purchases. Please try again later.</p>';
                }
            }

            // Initial load of all dynamic content when the page loads
            fetchAndRenderUserProfile();
            fetchAndRenderMyListings();
            fetchAndRenderMyPurchases();
        });
    </script>
</body>
</html>
